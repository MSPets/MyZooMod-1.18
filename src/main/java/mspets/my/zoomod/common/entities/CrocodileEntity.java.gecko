package mspets.my.zoomod.common.entities;

import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.AgeableMob;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.animal.Animal;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.Level;
import software.bernie.geckolib3.core.IAnimatable;
import software.bernie.geckolib3.core.PlayState;
import software.bernie.geckolib3.core.builder.AnimationBuilder;
import software.bernie.geckolib3.core.controller.AnimationController;
import software.bernie.geckolib3.core.event.predicate.AnimationEvent;
import software.bernie.geckolib3.core.manager.AnimationData;
import software.bernie.geckolib3.core.manager.AnimationFactory;

import javax.annotation.Nullable;

// https://forums.minecraftforge.net/topic/92625-1163-cant-register-entity-with-deferred-register/
public class CrocodileEntity extends Animal implements IAnimatable
{
    private final AnimationFactory factory = new AnimationFactory(this);

    public CrocodileEntity(EntityType<? extends Animal> type, Level worldIn)
    {
        super(type, worldIn);
    }

    @Nullable
    @Override
    public AgeableMob getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob)
    {
        return null;
    }

    @Override
    protected void registerGoals()
    {
        super.registerGoals();
        int priority = 0;
        // TODO Make sure this works
        this.goalSelector.addGoal(priority++, new RandomSwimmingGoal(this, 1.0F, 4));
        this.goalSelector.addGoal(priority++, new PanicGoal(this, 1.25D));
        //this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
        //this.goalSelector.addGoal(3, new TemptGoal(this, 1.1D, Ingredient.fromItems(ItemInitNew.DEF_ITEM.get()), false));
        this.goalSelector.addGoal(priority++, new WaterAvoidingRandomStrollGoal(this, 1.0D));
        this.goalSelector.addGoal(priority++, new LookAtPlayerGoal(this, Player.class, 6.0F));
        this.goalSelector.addGoal(priority++, new RandomLookAroundGoal(this));
    }

    public static AttributeSupplier.Builder prepareAttributes()
    {
        return LivingEntity.createLivingAttributes()
                .add(Attributes.MAX_HEALTH, 20.0)
                .add(Attributes.MOVEMENT_SPEED, 0.3)
                .add(Attributes.FOLLOW_RANGE, 40);
    }

    // Geckolib
    @Override
    public void registerControllers(AnimationData data)
    {
        data.addAnimationController(new AnimationController(this, "controller", 0, this::predicate));
    }

    @Override
    public AnimationFactory getFactory()
    {
        return this.factory;
    }

    private <E extends IAnimatable> PlayState predicate(AnimationEvent<E> event)
    {
        if (event.isMoving())
        {
            event.getController().setAnimation(new AnimationBuilder().addAnimation("animation.crocodile.walking", true));
        }
        else
        {
            event.getController().setAnimation(new AnimationBuilder().addAnimation("animation.crocodile.tail", true));
        }
        return PlayState.CONTINUE;
    }
}
